import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error, r2_score
import kagglehub

# Step 1: Download from Kaggle
path = kagglehub.dataset_download("adrianmcmahon/imdb-india-movies")
print("Files downloaded:", os.listdir(path))

# Step 2: Pick the correct file
csv_file = [f for f in os.listdir(path) if f.lower().endswith(".csv")][0]
print("Using file:", csv_file)

# Step 3: Read with proper encoding
df = pd.read_csv(os.path.join(path, csv_file), encoding="latin1")

# Step 4: Drop missing ratings
df = df.dropna(subset=["Rating"])

# ✅ CLEANING
# Clean the Year column: remove brackets and non-digit characters
df["Year"] = df["Year"].astype(str).str.extract(r"(\d{4})")  # extract year only
df["Year"] = pd.to_numeric(df["Year"], errors="coerce")      # convert to number
df = df.dropna(subset=["Year"])                              # remove invalid years
df["Year"] = df["Year"].astype(int)

# Clean Duration: remove " min"
df["Duration"] = df["Duration"].astype(str).str.replace(" min", "", regex=False)
df["Duration"] = pd.to_numeric(df["Duration"], errors="coerce")
df = df.dropna(subset=["Duration"])
df["Duration"] = df["Duration"].astype(int)

# Simplify Genre (keep first genre only)
df["Genre"] = df["Genre"].astype(str).str.split(",").map(lambda x: x[0].strip())

# Handle missing Votes
df = df.dropna(subset=["Votes"])

# ✅ One-hot encode Genre (use sparse_output instead of sparse)
encoder = OneHotEncoder(sparse_output=False, handle_unknown="ignore")
genre_encoded = encoder.fit_transform(df[["Genre"]])
genre_df = pd.DataFrame(genre_encoded, columns=encoder.get_feature_names_out(["Genre"]))

# Combine features
X = pd.concat([
    df[["Year", "Duration", "Votes"]].reset_index(drop=True),
    genre_df.reset_index(drop=True)
], axis=1)
y = df["Rating"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("RMSE:", mean_squared_error(y_test, y_pred, squared=False))
print("R² score:", r2_score(y_test, y_pred))

# Feature importance plot
plt.figure(figsize=(10, 6))
feat_imp = pd.Series(model.feature_importances_, index=X.columns)
feat_imp.nlargest(10).plot(kind="barh")
plt.title("Top 10 Feature Importances")
plt.xlabel("Importance")
plt.tight_layout()
plt.show()
